
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Post
 * 
 */
export type Post = {
  id: string
  title: string
  content: string | null
  published: boolean
  authorId: string | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: string
  name: string | null
  email: string | null
  comment: string | null
  affiliation: string | null
  society: string[]
  snsaccount: string[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Thesis
 * 
 */
export type Thesis = {
  id: number
  title: string
  abstract: string
  firstAuthorId: string
  otherAuthor: string[]
}

/**
 * Model Tag
 * 
 */
export type Tag = {
  id: number
  tagName: string
}

/**
 * Model ThesisOnTag
 * 
 */
export type ThesisOnTag = {
  thesisId: number
  tagId: number
}

/**
 * Model Follows
 * 
 */
export type Follows = {
  followerId: string
  followingId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Posts
 * const posts = await prisma.post.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Posts
   * const posts = await prisma.post.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.thesis`: Exposes CRUD operations for the **Thesis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Theses
    * const theses = await prisma.thesis.findMany()
    * ```
    */
  get thesis(): Prisma.ThesisDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.thesisOnTag`: Exposes CRUD operations for the **ThesisOnTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThesisOnTags
    * const thesisOnTags = await prisma.thesisOnTag.findMany()
    * ```
    */
  get thesisOnTag(): Prisma.ThesisOnTagDelegate<GlobalReject>;

  /**
   * `prisma.follows`: Exposes CRUD operations for the **Follows** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follows.findMany()
    * ```
    */
  get follows(): Prisma.FollowsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Post: 'Post',
    User: 'User',
    Profile: 'Profile',
    Thesis: 'Thesis',
    Tag: 'Tag',
    ThesisOnTag: 'ThesisOnTag',
    Follows: 'Follows'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    posts: number
  }

  export type UserCountOutputTypeSelect = {
    posts?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfileCountOutputType
   */


  export type ProfileCountOutputType = {
    followBy: number
    following: number
    thesis: number
  }

  export type ProfileCountOutputTypeSelect = {
    followBy?: boolean
    following?: boolean
    thesis?: boolean
  }

  export type ProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfileCountOutputType
    : S extends undefined
    ? never
    : S extends ProfileCountOutputTypeArgs
    ?'include' extends U
    ? ProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfileCountOutputType ? ProfileCountOutputType[P] : never
  } 
    : ProfileCountOutputType
  : ProfileCountOutputType




  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     * 
    **/
    select?: ProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type ThesisCountOutputType
   */


  export type ThesisCountOutputType = {
    tags: number
  }

  export type ThesisCountOutputTypeSelect = {
    tags?: boolean
  }

  export type ThesisCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ThesisCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ThesisCountOutputType
    : S extends undefined
    ? never
    : S extends ThesisCountOutputTypeArgs
    ?'include' extends U
    ? ThesisCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ThesisCountOutputType ? ThesisCountOutputType[P] : never
  } 
    : ThesisCountOutputType
  : ThesisCountOutputType




  // Custom InputTypes

  /**
   * ThesisCountOutputType without action
   */
  export type ThesisCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ThesisCountOutputType
     * 
    **/
    select?: ThesisCountOutputTypeSelect | null
  }



  /**
   * Count Type TagCountOutputType
   */


  export type TagCountOutputType = {
    thesis: number
  }

  export type TagCountOutputTypeSelect = {
    thesis?: boolean
  }

  export type TagCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TagCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TagCountOutputType
    : S extends undefined
    ? never
    : S extends TagCountOutputTypeArgs
    ?'include' extends U
    ? TagCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TagCountOutputType ? TagCountOutputType[P] : never
  } 
    : TagCountOutputType
  : TagCountOutputType




  // Custom InputTypes

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     * 
    **/
    select?: TagCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    published: number
    authorId: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: string
    title: string
    content: string | null
    published: boolean
    authorId: string | null
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
  }

  export type PostInclude = {
    author?: boolean | UserArgs
  }

  export type PostGetPayload<
    S extends boolean | null | undefined | PostArgs,
    U = keyof S
      > = S extends true
        ? Post
    : S extends undefined
    ? never
    : S extends PostArgs | PostFindManyArgs
    ?'include' extends U
    ? Post  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Post ? Post[P] : never
  } 
    : Post
  : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Find one Post that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }

  /**
   * Post: findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post: findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     * 
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     * 
    **/
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     * 
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     * 
    **/
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     * 
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     * 
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post: findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = PostFindUniqueArgsBase
      

  /**
   * Post: findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = PostFindFirstArgsBase
      

  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | PostFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    posts?: boolean | PostFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posts<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    comment: string | null
    affiliation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    comment: string | null
    affiliation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    email: number
    comment: number
    affiliation: number
    society: number
    snsaccount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    comment?: true
    affiliation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    comment?: true
    affiliation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    comment?: true
    affiliation?: true
    society?: true
    snsaccount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    comment: string | null
    affiliation: string | null
    society: string[]
    snsaccount: string[]
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    comment?: boolean
    affiliation?: boolean
    society?: boolean
    followBy?: boolean | FollowsFindManyArgs
    following?: boolean | FollowsFindManyArgs
    thesis?: boolean | ThesisFindManyArgs
    snsaccount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileInclude = {
    followBy?: boolean | FollowsFindManyArgs
    following?: boolean | FollowsFindManyArgs
    thesis?: boolean | ThesisFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'followBy' ? Array < FollowsGetPayload<S['include'][P]>>  :
        P extends 'following' ? Array < FollowsGetPayload<S['include'][P]>>  :
        P extends 'thesis' ? Array < ThesisGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'followBy' ? Array < FollowsGetPayload<S['select'][P]>>  :
        P extends 'following' ? Array < FollowsGetPayload<S['select'][P]>>  :
        P extends 'thesis' ? Array < ThesisGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Find one Profile that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    followBy<T extends FollowsFindManyArgs = {}>(args?: Subset<T, FollowsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Follows>>, PrismaPromise<Array<FollowsGetPayload<T>>>>;

    following<T extends FollowsFindManyArgs = {}>(args?: Subset<T, FollowsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Follows>>, PrismaPromise<Array<FollowsGetPayload<T>>>>;

    thesis<T extends ThesisFindManyArgs = {}>(args?: Subset<T, ThesisFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Thesis>>, PrismaPromise<Array<ThesisGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile: findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile: findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile: findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = ProfileFindUniqueArgsBase
      

  /**
   * Profile: findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = ProfileFindFirstArgsBase
      

  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Thesis
   */


  export type AggregateThesis = {
    _count: ThesisCountAggregateOutputType | null
    _avg: ThesisAvgAggregateOutputType | null
    _sum: ThesisSumAggregateOutputType | null
    _min: ThesisMinAggregateOutputType | null
    _max: ThesisMaxAggregateOutputType | null
  }

  export type ThesisAvgAggregateOutputType = {
    id: number | null
  }

  export type ThesisSumAggregateOutputType = {
    id: number | null
  }

  export type ThesisMinAggregateOutputType = {
    id: number | null
    title: string | null
    abstract: string | null
    firstAuthorId: string | null
  }

  export type ThesisMaxAggregateOutputType = {
    id: number | null
    title: string | null
    abstract: string | null
    firstAuthorId: string | null
  }

  export type ThesisCountAggregateOutputType = {
    id: number
    title: number
    abstract: number
    firstAuthorId: number
    otherAuthor: number
    _all: number
  }


  export type ThesisAvgAggregateInputType = {
    id?: true
  }

  export type ThesisSumAggregateInputType = {
    id?: true
  }

  export type ThesisMinAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    firstAuthorId?: true
  }

  export type ThesisMaxAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    firstAuthorId?: true
  }

  export type ThesisCountAggregateInputType = {
    id?: true
    title?: true
    abstract?: true
    firstAuthorId?: true
    otherAuthor?: true
    _all?: true
  }

  export type ThesisAggregateArgs = {
    /**
     * Filter which Thesis to aggregate.
     * 
    **/
    where?: ThesisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theses to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThesisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Theses
    **/
    _count?: true | ThesisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThesisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThesisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThesisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThesisMaxAggregateInputType
  }

  export type GetThesisAggregateType<T extends ThesisAggregateArgs> = {
        [P in keyof T & keyof AggregateThesis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThesis[P]>
      : GetScalarType<T[P], AggregateThesis[P]>
  }




  export type ThesisGroupByArgs = {
    where?: ThesisWhereInput
    orderBy?: Enumerable<ThesisOrderByWithAggregationInput>
    by: Array<ThesisScalarFieldEnum>
    having?: ThesisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThesisCountAggregateInputType | true
    _avg?: ThesisAvgAggregateInputType
    _sum?: ThesisSumAggregateInputType
    _min?: ThesisMinAggregateInputType
    _max?: ThesisMaxAggregateInputType
  }


  export type ThesisGroupByOutputType = {
    id: number
    title: string
    abstract: string
    firstAuthorId: string
    otherAuthor: string[]
    _count: ThesisCountAggregateOutputType | null
    _avg: ThesisAvgAggregateOutputType | null
    _sum: ThesisSumAggregateOutputType | null
    _min: ThesisMinAggregateOutputType | null
    _max: ThesisMaxAggregateOutputType | null
  }

  type GetThesisGroupByPayload<T extends ThesisGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ThesisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThesisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThesisGroupByOutputType[P]>
            : GetScalarType<T[P], ThesisGroupByOutputType[P]>
        }
      >
    >


  export type ThesisSelect = {
    id?: boolean
    title?: boolean
    abstract?: boolean
    firstAuthor?: boolean | ProfileArgs
    firstAuthorId?: boolean
    otherAuthor?: boolean
    tags?: boolean | ThesisOnTagFindManyArgs
    _count?: boolean | ThesisCountOutputTypeArgs
  }

  export type ThesisInclude = {
    firstAuthor?: boolean | ProfileArgs
    tags?: boolean | ThesisOnTagFindManyArgs
    _count?: boolean | ThesisCountOutputTypeArgs
  }

  export type ThesisGetPayload<
    S extends boolean | null | undefined | ThesisArgs,
    U = keyof S
      > = S extends true
        ? Thesis
    : S extends undefined
    ? never
    : S extends ThesisArgs | ThesisFindManyArgs
    ?'include' extends U
    ? Thesis  & {
    [P in TrueKeys<S['include']>]:
        P extends 'firstAuthor' ? ProfileGetPayload<S['include'][P]> :
        P extends 'tags' ? Array < ThesisOnTagGetPayload<S['include'][P]>>  :
        P extends '_count' ? ThesisCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'firstAuthor' ? ProfileGetPayload<S['select'][P]> :
        P extends 'tags' ? Array < ThesisOnTagGetPayload<S['select'][P]>>  :
        P extends '_count' ? ThesisCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Thesis ? Thesis[P] : never
  } 
    : Thesis
  : Thesis


  type ThesisCountArgs = Merge<
    Omit<ThesisFindManyArgs, 'select' | 'include'> & {
      select?: ThesisCountAggregateInputType | true
    }
  >

  export interface ThesisDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Thesis that matches the filter.
     * @param {ThesisFindUniqueArgs} args - Arguments to find a Thesis
     * @example
     * // Get one Thesis
     * const thesis = await prisma.thesis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThesisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThesisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Thesis'> extends True ? CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>> : CheckSelect<T, Prisma__ThesisClient<Thesis | null >, Prisma__ThesisClient<ThesisGetPayload<T> | null >>

    /**
     * Find the first Thesis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisFindFirstArgs} args - Arguments to find a Thesis
     * @example
     * // Get one Thesis
     * const thesis = await prisma.thesis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThesisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThesisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Thesis'> extends True ? CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>> : CheckSelect<T, Prisma__ThesisClient<Thesis | null >, Prisma__ThesisClient<ThesisGetPayload<T> | null >>

    /**
     * Find zero or more Theses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Theses
     * const theses = await prisma.thesis.findMany()
     * 
     * // Get first 10 Theses
     * const theses = await prisma.thesis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thesisWithIdOnly = await prisma.thesis.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThesisFindManyArgs>(
      args?: SelectSubset<T, ThesisFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Thesis>>, PrismaPromise<Array<ThesisGetPayload<T>>>>

    /**
     * Create a Thesis.
     * @param {ThesisCreateArgs} args - Arguments to create a Thesis.
     * @example
     * // Create one Thesis
     * const Thesis = await prisma.thesis.create({
     *   data: {
     *     // ... data to create a Thesis
     *   }
     * })
     * 
    **/
    create<T extends ThesisCreateArgs>(
      args: SelectSubset<T, ThesisCreateArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Create many Theses.
     *     @param {ThesisCreateManyArgs} args - Arguments to create many Theses.
     *     @example
     *     // Create many Theses
     *     const thesis = await prisma.thesis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThesisCreateManyArgs>(
      args?: SelectSubset<T, ThesisCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Thesis.
     * @param {ThesisDeleteArgs} args - Arguments to delete one Thesis.
     * @example
     * // Delete one Thesis
     * const Thesis = await prisma.thesis.delete({
     *   where: {
     *     // ... filter to delete one Thesis
     *   }
     * })
     * 
    **/
    delete<T extends ThesisDeleteArgs>(
      args: SelectSubset<T, ThesisDeleteArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Update one Thesis.
     * @param {ThesisUpdateArgs} args - Arguments to update one Thesis.
     * @example
     * // Update one Thesis
     * const thesis = await prisma.thesis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThesisUpdateArgs>(
      args: SelectSubset<T, ThesisUpdateArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Delete zero or more Theses.
     * @param {ThesisDeleteManyArgs} args - Arguments to filter Theses to delete.
     * @example
     * // Delete a few Theses
     * const { count } = await prisma.thesis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThesisDeleteManyArgs>(
      args?: SelectSubset<T, ThesisDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Theses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Theses
     * const thesis = await prisma.thesis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThesisUpdateManyArgs>(
      args: SelectSubset<T, ThesisUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Thesis.
     * @param {ThesisUpsertArgs} args - Arguments to update or create a Thesis.
     * @example
     * // Update or create a Thesis
     * const thesis = await prisma.thesis.upsert({
     *   create: {
     *     // ... data to create a Thesis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thesis we want to update
     *   }
     * })
    **/
    upsert<T extends ThesisUpsertArgs>(
      args: SelectSubset<T, ThesisUpsertArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Find one Thesis that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ThesisFindUniqueOrThrowArgs} args - Arguments to find a Thesis
     * @example
     * // Get one Thesis
     * const thesis = await prisma.thesis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThesisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThesisFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Find the first Thesis that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisFindFirstOrThrowArgs} args - Arguments to find a Thesis
     * @example
     * // Get one Thesis
     * const thesis = await prisma.thesis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThesisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThesisFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ThesisClient<Thesis>, Prisma__ThesisClient<ThesisGetPayload<T>>>

    /**
     * Count the number of Theses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisCountArgs} args - Arguments to filter Theses to count.
     * @example
     * // Count the number of Theses
     * const count = await prisma.thesis.count({
     *   where: {
     *     // ... the filter for the Theses we want to count
     *   }
     * })
    **/
    count<T extends ThesisCountArgs>(
      args?: Subset<T, ThesisCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThesisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thesis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThesisAggregateArgs>(args: Subset<T, ThesisAggregateArgs>): PrismaPromise<GetThesisAggregateType<T>>

    /**
     * Group by Thesis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThesisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThesisGroupByArgs['orderBy'] }
        : { orderBy?: ThesisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThesisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThesisGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Thesis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThesisClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    firstAuthor<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    tags<T extends ThesisOnTagFindManyArgs = {}>(args?: Subset<T, ThesisOnTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ThesisOnTag>>, PrismaPromise<Array<ThesisOnTagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Thesis base type for findUnique actions
   */
  export type ThesisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * Filter, which Thesis to fetch.
     * 
    **/
    where: ThesisWhereUniqueInput
  }

  /**
   * Thesis: findUnique
   */
  export interface ThesisFindUniqueArgs extends ThesisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Thesis base type for findFirst actions
   */
  export type ThesisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * Filter, which Thesis to fetch.
     * 
    **/
    where?: ThesisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theses to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Theses.
     * 
    **/
    cursor?: ThesisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Theses.
     * 
    **/
    distinct?: Enumerable<ThesisScalarFieldEnum>
  }

  /**
   * Thesis: findFirst
   */
  export interface ThesisFindFirstArgs extends ThesisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Thesis findMany
   */
  export type ThesisFindManyArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * Filter, which Theses to fetch.
     * 
    **/
    where?: ThesisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theses to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Theses.
     * 
    **/
    cursor?: ThesisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThesisScalarFieldEnum>
  }


  /**
   * Thesis create
   */
  export type ThesisCreateArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * The data needed to create a Thesis.
     * 
    **/
    data: XOR<ThesisCreateInput, ThesisUncheckedCreateInput>
  }


  /**
   * Thesis createMany
   */
  export type ThesisCreateManyArgs = {
    /**
     * The data used to create many Theses.
     * 
    **/
    data: Enumerable<ThesisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Thesis update
   */
  export type ThesisUpdateArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * The data needed to update a Thesis.
     * 
    **/
    data: XOR<ThesisUpdateInput, ThesisUncheckedUpdateInput>
    /**
     * Choose, which Thesis to update.
     * 
    **/
    where: ThesisWhereUniqueInput
  }


  /**
   * Thesis updateMany
   */
  export type ThesisUpdateManyArgs = {
    /**
     * The data used to update Theses.
     * 
    **/
    data: XOR<ThesisUpdateManyMutationInput, ThesisUncheckedUpdateManyInput>
    /**
     * Filter which Theses to update
     * 
    **/
    where?: ThesisWhereInput
  }


  /**
   * Thesis upsert
   */
  export type ThesisUpsertArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * The filter to search for the Thesis to update in case it exists.
     * 
    **/
    where: ThesisWhereUniqueInput
    /**
     * In case the Thesis found by the `where` argument doesn't exist, create a new Thesis with this data.
     * 
    **/
    create: XOR<ThesisCreateInput, ThesisUncheckedCreateInput>
    /**
     * In case the Thesis was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThesisUpdateInput, ThesisUncheckedUpdateInput>
  }


  /**
   * Thesis delete
   */
  export type ThesisDeleteArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
    /**
     * Filter which Thesis to delete.
     * 
    **/
    where: ThesisWhereUniqueInput
  }


  /**
   * Thesis deleteMany
   */
  export type ThesisDeleteManyArgs = {
    /**
     * Filter which Theses to delete
     * 
    **/
    where?: ThesisWhereInput
  }


  /**
   * Thesis: findUniqueOrThrow
   */
  export type ThesisFindUniqueOrThrowArgs = ThesisFindUniqueArgsBase
      

  /**
   * Thesis: findFirstOrThrow
   */
  export type ThesisFindFirstOrThrowArgs = ThesisFindFirstArgsBase
      

  /**
   * Thesis without action
   */
  export type ThesisArgs = {
    /**
     * Select specific fields to fetch from the Thesis
     * 
    **/
    select?: ThesisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    tagName: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    tagName: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    tagName: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    tagName?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    tagName?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    tagName?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: number
    tagName: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect = {
    id?: boolean
    tagName?: boolean
    thesis?: boolean | ThesisOnTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagInclude = {
    thesis?: boolean | ThesisOnTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'thesis' ? Array < ThesisOnTagGetPayload<S['include'][P]>>  :
        P extends '_count' ? TagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'thesis' ? Array < ThesisOnTagGetPayload<S['select'][P]>>  :
        P extends '_count' ? TagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tag ? Tag[P] : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Find one Tag that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Find the first Tag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    thesis<T extends ThesisOnTagFindManyArgs = {}>(args?: Subset<T, ThesisOnTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ThesisOnTag>>, PrismaPromise<Array<ThesisOnTagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag base type for findUnique actions
   */
  export type TagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where: TagWhereUniqueInput
  }

  /**
   * Tag: findUnique
   */
  export interface TagFindUniqueArgs extends TagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag base type for findFirst actions
   */
  export type TagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }

  /**
   * Tag: findFirst
   */
  export interface TagFindFirstArgs extends TagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
     * 
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    /**
     * The data used to create many Tags.
     * 
    **/
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
     * 
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    /**
     * The data used to update Tags.
     * 
    **/
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
     * 
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     * 
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag: findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs = TagFindUniqueArgsBase
      

  /**
   * Tag: findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs = TagFindFirstArgsBase
      

  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
  }



  /**
   * Model ThesisOnTag
   */


  export type AggregateThesisOnTag = {
    _count: ThesisOnTagCountAggregateOutputType | null
    _avg: ThesisOnTagAvgAggregateOutputType | null
    _sum: ThesisOnTagSumAggregateOutputType | null
    _min: ThesisOnTagMinAggregateOutputType | null
    _max: ThesisOnTagMaxAggregateOutputType | null
  }

  export type ThesisOnTagAvgAggregateOutputType = {
    thesisId: number | null
    tagId: number | null
  }

  export type ThesisOnTagSumAggregateOutputType = {
    thesisId: number | null
    tagId: number | null
  }

  export type ThesisOnTagMinAggregateOutputType = {
    thesisId: number | null
    tagId: number | null
  }

  export type ThesisOnTagMaxAggregateOutputType = {
    thesisId: number | null
    tagId: number | null
  }

  export type ThesisOnTagCountAggregateOutputType = {
    thesisId: number
    tagId: number
    _all: number
  }


  export type ThesisOnTagAvgAggregateInputType = {
    thesisId?: true
    tagId?: true
  }

  export type ThesisOnTagSumAggregateInputType = {
    thesisId?: true
    tagId?: true
  }

  export type ThesisOnTagMinAggregateInputType = {
    thesisId?: true
    tagId?: true
  }

  export type ThesisOnTagMaxAggregateInputType = {
    thesisId?: true
    tagId?: true
  }

  export type ThesisOnTagCountAggregateInputType = {
    thesisId?: true
    tagId?: true
    _all?: true
  }

  export type ThesisOnTagAggregateArgs = {
    /**
     * Filter which ThesisOnTag to aggregate.
     * 
    **/
    where?: ThesisOnTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThesisOnTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOnTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThesisOnTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThesisOnTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThesisOnTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThesisOnTags
    **/
    _count?: true | ThesisOnTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThesisOnTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThesisOnTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThesisOnTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThesisOnTagMaxAggregateInputType
  }

  export type GetThesisOnTagAggregateType<T extends ThesisOnTagAggregateArgs> = {
        [P in keyof T & keyof AggregateThesisOnTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThesisOnTag[P]>
      : GetScalarType<T[P], AggregateThesisOnTag[P]>
  }




  export type ThesisOnTagGroupByArgs = {
    where?: ThesisOnTagWhereInput
    orderBy?: Enumerable<ThesisOnTagOrderByWithAggregationInput>
    by: Array<ThesisOnTagScalarFieldEnum>
    having?: ThesisOnTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThesisOnTagCountAggregateInputType | true
    _avg?: ThesisOnTagAvgAggregateInputType
    _sum?: ThesisOnTagSumAggregateInputType
    _min?: ThesisOnTagMinAggregateInputType
    _max?: ThesisOnTagMaxAggregateInputType
  }


  export type ThesisOnTagGroupByOutputType = {
    thesisId: number
    tagId: number
    _count: ThesisOnTagCountAggregateOutputType | null
    _avg: ThesisOnTagAvgAggregateOutputType | null
    _sum: ThesisOnTagSumAggregateOutputType | null
    _min: ThesisOnTagMinAggregateOutputType | null
    _max: ThesisOnTagMaxAggregateOutputType | null
  }

  type GetThesisOnTagGroupByPayload<T extends ThesisOnTagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ThesisOnTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThesisOnTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThesisOnTagGroupByOutputType[P]>
            : GetScalarType<T[P], ThesisOnTagGroupByOutputType[P]>
        }
      >
    >


  export type ThesisOnTagSelect = {
    thesis?: boolean | ThesisArgs
    thesisId?: boolean
    tags?: boolean | TagArgs
    tagId?: boolean
  }

  export type ThesisOnTagInclude = {
    thesis?: boolean | ThesisArgs
    tags?: boolean | TagArgs
  }

  export type ThesisOnTagGetPayload<
    S extends boolean | null | undefined | ThesisOnTagArgs,
    U = keyof S
      > = S extends true
        ? ThesisOnTag
    : S extends undefined
    ? never
    : S extends ThesisOnTagArgs | ThesisOnTagFindManyArgs
    ?'include' extends U
    ? ThesisOnTag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'thesis' ? ThesisGetPayload<S['include'][P]> :
        P extends 'tags' ? TagGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'thesis' ? ThesisGetPayload<S['select'][P]> :
        P extends 'tags' ? TagGetPayload<S['select'][P]> :  P extends keyof ThesisOnTag ? ThesisOnTag[P] : never
  } 
    : ThesisOnTag
  : ThesisOnTag


  type ThesisOnTagCountArgs = Merge<
    Omit<ThesisOnTagFindManyArgs, 'select' | 'include'> & {
      select?: ThesisOnTagCountAggregateInputType | true
    }
  >

  export interface ThesisOnTagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ThesisOnTag that matches the filter.
     * @param {ThesisOnTagFindUniqueArgs} args - Arguments to find a ThesisOnTag
     * @example
     * // Get one ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThesisOnTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThesisOnTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ThesisOnTag'> extends True ? CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>> : CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag | null >, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T> | null >>

    /**
     * Find the first ThesisOnTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagFindFirstArgs} args - Arguments to find a ThesisOnTag
     * @example
     * // Get one ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThesisOnTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThesisOnTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ThesisOnTag'> extends True ? CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>> : CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag | null >, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T> | null >>

    /**
     * Find zero or more ThesisOnTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThesisOnTags
     * const thesisOnTags = await prisma.thesisOnTag.findMany()
     * 
     * // Get first 10 ThesisOnTags
     * const thesisOnTags = await prisma.thesisOnTag.findMany({ take: 10 })
     * 
     * // Only select the `thesisId`
     * const thesisOnTagWithThesisIdOnly = await prisma.thesisOnTag.findMany({ select: { thesisId: true } })
     * 
    **/
    findMany<T extends ThesisOnTagFindManyArgs>(
      args?: SelectSubset<T, ThesisOnTagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ThesisOnTag>>, PrismaPromise<Array<ThesisOnTagGetPayload<T>>>>

    /**
     * Create a ThesisOnTag.
     * @param {ThesisOnTagCreateArgs} args - Arguments to create a ThesisOnTag.
     * @example
     * // Create one ThesisOnTag
     * const ThesisOnTag = await prisma.thesisOnTag.create({
     *   data: {
     *     // ... data to create a ThesisOnTag
     *   }
     * })
     * 
    **/
    create<T extends ThesisOnTagCreateArgs>(
      args: SelectSubset<T, ThesisOnTagCreateArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Create many ThesisOnTags.
     *     @param {ThesisOnTagCreateManyArgs} args - Arguments to create many ThesisOnTags.
     *     @example
     *     // Create many ThesisOnTags
     *     const thesisOnTag = await prisma.thesisOnTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThesisOnTagCreateManyArgs>(
      args?: SelectSubset<T, ThesisOnTagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ThesisOnTag.
     * @param {ThesisOnTagDeleteArgs} args - Arguments to delete one ThesisOnTag.
     * @example
     * // Delete one ThesisOnTag
     * const ThesisOnTag = await prisma.thesisOnTag.delete({
     *   where: {
     *     // ... filter to delete one ThesisOnTag
     *   }
     * })
     * 
    **/
    delete<T extends ThesisOnTagDeleteArgs>(
      args: SelectSubset<T, ThesisOnTagDeleteArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Update one ThesisOnTag.
     * @param {ThesisOnTagUpdateArgs} args - Arguments to update one ThesisOnTag.
     * @example
     * // Update one ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThesisOnTagUpdateArgs>(
      args: SelectSubset<T, ThesisOnTagUpdateArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Delete zero or more ThesisOnTags.
     * @param {ThesisOnTagDeleteManyArgs} args - Arguments to filter ThesisOnTags to delete.
     * @example
     * // Delete a few ThesisOnTags
     * const { count } = await prisma.thesisOnTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThesisOnTagDeleteManyArgs>(
      args?: SelectSubset<T, ThesisOnTagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThesisOnTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThesisOnTags
     * const thesisOnTag = await prisma.thesisOnTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThesisOnTagUpdateManyArgs>(
      args: SelectSubset<T, ThesisOnTagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ThesisOnTag.
     * @param {ThesisOnTagUpsertArgs} args - Arguments to update or create a ThesisOnTag.
     * @example
     * // Update or create a ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.upsert({
     *   create: {
     *     // ... data to create a ThesisOnTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThesisOnTag we want to update
     *   }
     * })
    **/
    upsert<T extends ThesisOnTagUpsertArgs>(
      args: SelectSubset<T, ThesisOnTagUpsertArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Find one ThesisOnTag that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ThesisOnTagFindUniqueOrThrowArgs} args - Arguments to find a ThesisOnTag
     * @example
     * // Get one ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThesisOnTagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThesisOnTagFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Find the first ThesisOnTag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagFindFirstOrThrowArgs} args - Arguments to find a ThesisOnTag
     * @example
     * // Get one ThesisOnTag
     * const thesisOnTag = await prisma.thesisOnTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThesisOnTagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThesisOnTagFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ThesisOnTagClient<ThesisOnTag>, Prisma__ThesisOnTagClient<ThesisOnTagGetPayload<T>>>

    /**
     * Count the number of ThesisOnTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagCountArgs} args - Arguments to filter ThesisOnTags to count.
     * @example
     * // Count the number of ThesisOnTags
     * const count = await prisma.thesisOnTag.count({
     *   where: {
     *     // ... the filter for the ThesisOnTags we want to count
     *   }
     * })
    **/
    count<T extends ThesisOnTagCountArgs>(
      args?: Subset<T, ThesisOnTagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThesisOnTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThesisOnTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThesisOnTagAggregateArgs>(args: Subset<T, ThesisOnTagAggregateArgs>): PrismaPromise<GetThesisOnTagAggregateType<T>>

    /**
     * Group by ThesisOnTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThesisOnTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThesisOnTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThesisOnTagGroupByArgs['orderBy'] }
        : { orderBy?: ThesisOnTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThesisOnTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThesisOnTagGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThesisOnTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThesisOnTagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    thesis<T extends ThesisArgs = {}>(args?: Subset<T, ThesisArgs>): CheckSelect<T, Prisma__ThesisClient<Thesis | null >, Prisma__ThesisClient<ThesisGetPayload<T> | null >>;

    tags<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ThesisOnTag base type for findUnique actions
   */
  export type ThesisOnTagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * Filter, which ThesisOnTag to fetch.
     * 
    **/
    where: ThesisOnTagWhereUniqueInput
  }

  /**
   * ThesisOnTag: findUnique
   */
  export interface ThesisOnTagFindUniqueArgs extends ThesisOnTagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThesisOnTag base type for findFirst actions
   */
  export type ThesisOnTagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * Filter, which ThesisOnTag to fetch.
     * 
    **/
    where?: ThesisOnTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThesisOnTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOnTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThesisOnTags.
     * 
    **/
    cursor?: ThesisOnTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThesisOnTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThesisOnTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThesisOnTags.
     * 
    **/
    distinct?: Enumerable<ThesisOnTagScalarFieldEnum>
  }

  /**
   * ThesisOnTag: findFirst
   */
  export interface ThesisOnTagFindFirstArgs extends ThesisOnTagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ThesisOnTag findMany
   */
  export type ThesisOnTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * Filter, which ThesisOnTags to fetch.
     * 
    **/
    where?: ThesisOnTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThesisOnTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ThesisOnTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThesisOnTags.
     * 
    **/
    cursor?: ThesisOnTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThesisOnTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThesisOnTags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThesisOnTagScalarFieldEnum>
  }


  /**
   * ThesisOnTag create
   */
  export type ThesisOnTagCreateArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * The data needed to create a ThesisOnTag.
     * 
    **/
    data: XOR<ThesisOnTagCreateInput, ThesisOnTagUncheckedCreateInput>
  }


  /**
   * ThesisOnTag createMany
   */
  export type ThesisOnTagCreateManyArgs = {
    /**
     * The data used to create many ThesisOnTags.
     * 
    **/
    data: Enumerable<ThesisOnTagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ThesisOnTag update
   */
  export type ThesisOnTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * The data needed to update a ThesisOnTag.
     * 
    **/
    data: XOR<ThesisOnTagUpdateInput, ThesisOnTagUncheckedUpdateInput>
    /**
     * Choose, which ThesisOnTag to update.
     * 
    **/
    where: ThesisOnTagWhereUniqueInput
  }


  /**
   * ThesisOnTag updateMany
   */
  export type ThesisOnTagUpdateManyArgs = {
    /**
     * The data used to update ThesisOnTags.
     * 
    **/
    data: XOR<ThesisOnTagUpdateManyMutationInput, ThesisOnTagUncheckedUpdateManyInput>
    /**
     * Filter which ThesisOnTags to update
     * 
    **/
    where?: ThesisOnTagWhereInput
  }


  /**
   * ThesisOnTag upsert
   */
  export type ThesisOnTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * The filter to search for the ThesisOnTag to update in case it exists.
     * 
    **/
    where: ThesisOnTagWhereUniqueInput
    /**
     * In case the ThesisOnTag found by the `where` argument doesn't exist, create a new ThesisOnTag with this data.
     * 
    **/
    create: XOR<ThesisOnTagCreateInput, ThesisOnTagUncheckedCreateInput>
    /**
     * In case the ThesisOnTag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThesisOnTagUpdateInput, ThesisOnTagUncheckedUpdateInput>
  }


  /**
   * ThesisOnTag delete
   */
  export type ThesisOnTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
    /**
     * Filter which ThesisOnTag to delete.
     * 
    **/
    where: ThesisOnTagWhereUniqueInput
  }


  /**
   * ThesisOnTag deleteMany
   */
  export type ThesisOnTagDeleteManyArgs = {
    /**
     * Filter which ThesisOnTags to delete
     * 
    **/
    where?: ThesisOnTagWhereInput
  }


  /**
   * ThesisOnTag: findUniqueOrThrow
   */
  export type ThesisOnTagFindUniqueOrThrowArgs = ThesisOnTagFindUniqueArgsBase
      

  /**
   * ThesisOnTag: findFirstOrThrow
   */
  export type ThesisOnTagFindFirstOrThrowArgs = ThesisOnTagFindFirstArgsBase
      

  /**
   * ThesisOnTag without action
   */
  export type ThesisOnTagArgs = {
    /**
     * Select specific fields to fetch from the ThesisOnTag
     * 
    **/
    select?: ThesisOnTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThesisOnTagInclude | null
  }



  /**
   * Model Follows
   */


  export type AggregateFollows = {
    _count: FollowsCountAggregateOutputType | null
    _min: FollowsMinAggregateOutputType | null
    _max: FollowsMaxAggregateOutputType | null
  }

  export type FollowsMinAggregateOutputType = {
    followerId: string | null
    followingId: string | null
  }

  export type FollowsMaxAggregateOutputType = {
    followerId: string | null
    followingId: string | null
  }

  export type FollowsCountAggregateOutputType = {
    followerId: number
    followingId: number
    _all: number
  }


  export type FollowsMinAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsMaxAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsCountAggregateInputType = {
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type FollowsAggregateArgs = {
    /**
     * Filter which Follows to aggregate.
     * 
    **/
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     * 
    **/
    orderBy?: Enumerable<FollowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowsMaxAggregateInputType
  }

  export type GetFollowsAggregateType<T extends FollowsAggregateArgs> = {
        [P in keyof T & keyof AggregateFollows]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollows[P]>
      : GetScalarType<T[P], AggregateFollows[P]>
  }




  export type FollowsGroupByArgs = {
    where?: FollowsWhereInput
    orderBy?: Enumerable<FollowsOrderByWithAggregationInput>
    by: Array<FollowsScalarFieldEnum>
    having?: FollowsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowsCountAggregateInputType | true
    _min?: FollowsMinAggregateInputType
    _max?: FollowsMaxAggregateInputType
  }


  export type FollowsGroupByOutputType = {
    followerId: string
    followingId: string
    _count: FollowsCountAggregateOutputType | null
    _min: FollowsMinAggregateOutputType | null
    _max: FollowsMaxAggregateOutputType | null
  }

  type GetFollowsGroupByPayload<T extends FollowsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FollowsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowsGroupByOutputType[P]>
            : GetScalarType<T[P], FollowsGroupByOutputType[P]>
        }
      >
    >


  export type FollowsSelect = {
    follower?: boolean | ProfileArgs
    followerId?: boolean
    following?: boolean | ProfileArgs
    followingId?: boolean
  }

  export type FollowsInclude = {
    follower?: boolean | ProfileArgs
    following?: boolean | ProfileArgs
  }

  export type FollowsGetPayload<
    S extends boolean | null | undefined | FollowsArgs,
    U = keyof S
      > = S extends true
        ? Follows
    : S extends undefined
    ? never
    : S extends FollowsArgs | FollowsFindManyArgs
    ?'include' extends U
    ? Follows  & {
    [P in TrueKeys<S['include']>]:
        P extends 'follower' ? ProfileGetPayload<S['include'][P]> :
        P extends 'following' ? ProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'follower' ? ProfileGetPayload<S['select'][P]> :
        P extends 'following' ? ProfileGetPayload<S['select'][P]> :  P extends keyof Follows ? Follows[P] : never
  } 
    : Follows
  : Follows


  type FollowsCountArgs = Merge<
    Omit<FollowsFindManyArgs, 'select' | 'include'> & {
      select?: FollowsCountAggregateInputType | true
    }
  >

  export interface FollowsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Follows that matches the filter.
     * @param {FollowsFindUniqueArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FollowsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Follows'> extends True ? CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>> : CheckSelect<T, Prisma__FollowsClient<Follows | null >, Prisma__FollowsClient<FollowsGetPayload<T> | null >>

    /**
     * Find the first Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindFirstArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FollowsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Follows'> extends True ? CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>> : CheckSelect<T, Prisma__FollowsClient<Follows | null >, Prisma__FollowsClient<FollowsGetPayload<T> | null >>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follows.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follows.findMany({ take: 10 })
     * 
     * // Only select the `followerId`
     * const followsWithFollowerIdOnly = await prisma.follows.findMany({ select: { followerId: true } })
     * 
    **/
    findMany<T extends FollowsFindManyArgs>(
      args?: SelectSubset<T, FollowsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Follows>>, PrismaPromise<Array<FollowsGetPayload<T>>>>

    /**
     * Create a Follows.
     * @param {FollowsCreateArgs} args - Arguments to create a Follows.
     * @example
     * // Create one Follows
     * const Follows = await prisma.follows.create({
     *   data: {
     *     // ... data to create a Follows
     *   }
     * })
     * 
    **/
    create<T extends FollowsCreateArgs>(
      args: SelectSubset<T, FollowsCreateArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Create many Follows.
     *     @param {FollowsCreateManyArgs} args - Arguments to create many Follows.
     *     @example
     *     // Create many Follows
     *     const follows = await prisma.follows.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowsCreateManyArgs>(
      args?: SelectSubset<T, FollowsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Follows.
     * @param {FollowsDeleteArgs} args - Arguments to delete one Follows.
     * @example
     * // Delete one Follows
     * const Follows = await prisma.follows.delete({
     *   where: {
     *     // ... filter to delete one Follows
     *   }
     * })
     * 
    **/
    delete<T extends FollowsDeleteArgs>(
      args: SelectSubset<T, FollowsDeleteArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Update one Follows.
     * @param {FollowsUpdateArgs} args - Arguments to update one Follows.
     * @example
     * // Update one Follows
     * const follows = await prisma.follows.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowsUpdateArgs>(
      args: SelectSubset<T, FollowsUpdateArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Delete zero or more Follows.
     * @param {FollowsDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follows.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowsDeleteManyArgs>(
      args?: SelectSubset<T, FollowsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follows = await prisma.follows.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowsUpdateManyArgs>(
      args: SelectSubset<T, FollowsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Follows.
     * @param {FollowsUpsertArgs} args - Arguments to update or create a Follows.
     * @example
     * // Update or create a Follows
     * const follows = await prisma.follows.upsert({
     *   create: {
     *     // ... data to create a Follows
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follows we want to update
     *   }
     * })
    **/
    upsert<T extends FollowsUpsertArgs>(
      args: SelectSubset<T, FollowsUpsertArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Find one Follows that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FollowsFindUniqueOrThrowArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FollowsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Find the first Follows that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindFirstOrThrowArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FollowsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FollowsClient<Follows>, Prisma__FollowsClient<FollowsGetPayload<T>>>

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follows.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowsCountArgs>(
      args?: Subset<T, FollowsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowsAggregateArgs>(args: Subset<T, FollowsAggregateArgs>): PrismaPromise<GetFollowsAggregateType<T>>

    /**
     * Group by Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowsGroupByArgs['orderBy'] }
        : { orderBy?: FollowsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follows.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    follower<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    following<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Follows base type for findUnique actions
   */
  export type FollowsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * Filter, which Follows to fetch.
     * 
    **/
    where: FollowsWhereUniqueInput
  }

  /**
   * Follows: findUnique
   */
  export interface FollowsFindUniqueArgs extends FollowsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Follows base type for findFirst actions
   */
  export type FollowsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * Filter, which Follows to fetch.
     * 
    **/
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     * 
    **/
    orderBy?: Enumerable<FollowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     * 
    **/
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     * 
    **/
    distinct?: Enumerable<FollowsScalarFieldEnum>
  }

  /**
   * Follows: findFirst
   */
  export interface FollowsFindFirstArgs extends FollowsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Follows findMany
   */
  export type FollowsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * Filter, which Follows to fetch.
     * 
    **/
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     * 
    **/
    orderBy?: Enumerable<FollowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     * 
    **/
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FollowsScalarFieldEnum>
  }


  /**
   * Follows create
   */
  export type FollowsCreateArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * The data needed to create a Follows.
     * 
    **/
    data: XOR<FollowsCreateInput, FollowsUncheckedCreateInput>
  }


  /**
   * Follows createMany
   */
  export type FollowsCreateManyArgs = {
    /**
     * The data used to create many Follows.
     * 
    **/
    data: Enumerable<FollowsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Follows update
   */
  export type FollowsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * The data needed to update a Follows.
     * 
    **/
    data: XOR<FollowsUpdateInput, FollowsUncheckedUpdateInput>
    /**
     * Choose, which Follows to update.
     * 
    **/
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows updateMany
   */
  export type FollowsUpdateManyArgs = {
    /**
     * The data used to update Follows.
     * 
    **/
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     * 
    **/
    where?: FollowsWhereInput
  }


  /**
   * Follows upsert
   */
  export type FollowsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * The filter to search for the Follows to update in case it exists.
     * 
    **/
    where: FollowsWhereUniqueInput
    /**
     * In case the Follows found by the `where` argument doesn't exist, create a new Follows with this data.
     * 
    **/
    create: XOR<FollowsCreateInput, FollowsUncheckedCreateInput>
    /**
     * In case the Follows was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FollowsUpdateInput, FollowsUncheckedUpdateInput>
  }


  /**
   * Follows delete
   */
  export type FollowsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
    /**
     * Filter which Follows to delete.
     * 
    **/
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows deleteMany
   */
  export type FollowsDeleteManyArgs = {
    /**
     * Filter which Follows to delete
     * 
    **/
    where?: FollowsWhereInput
  }


  /**
   * Follows: findUniqueOrThrow
   */
  export type FollowsFindUniqueOrThrowArgs = FollowsFindUniqueArgsBase
      

  /**
   * Follows: findFirstOrThrow
   */
  export type FollowsFindFirstOrThrowArgs = FollowsFindFirstArgsBase
      

  /**
   * Follows without action
   */
  export type FollowsArgs = {
    /**
     * Select specific fields to fetch from the Follows
     * 
    **/
    select?: FollowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FollowsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FollowsScalarFieldEnum: {
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type FollowsScalarFieldEnum = (typeof FollowsScalarFieldEnum)[keyof typeof FollowsScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    comment: 'comment',
    affiliation: 'affiliation',
    society: 'society',
    snsaccount: 'snsaccount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TagScalarFieldEnum: {
    id: 'id',
    tagName: 'tagName'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const ThesisOnTagScalarFieldEnum: {
    thesisId: 'thesisId',
    tagId: 'tagId'
  };

  export type ThesisOnTagScalarFieldEnum = (typeof ThesisOnTagScalarFieldEnum)[keyof typeof ThesisOnTagScalarFieldEnum]


  export const ThesisScalarFieldEnum: {
    id: 'id',
    title: 'title',
    abstract: 'abstract',
    firstAuthorId: 'firstAuthorId',
    otherAuthor: 'otherAuthor'
  };

  export type ThesisScalarFieldEnum = (typeof ThesisScalarFieldEnum)[keyof typeof ThesisScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    author?: XOR<UserRelationFilter, UserWhereInput> | null
    authorId?: StringNullableFilter | string | null
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    author?: UserOrderByWithRelationInput
    authorId?: SortOrder
  }

  export type PostWhereUniqueInput = {
    id?: string
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    content?: StringNullableWithAggregatesFilter | string | null
    published?: BoolWithAggregatesFilter | boolean
    authorId?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: PostListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: PostOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    comment?: StringNullableFilter | string | null
    affiliation?: StringNullableFilter | string | null
    society?: StringNullableListFilter
    followBy?: FollowsListRelationFilter
    following?: FollowsListRelationFilter
    thesis?: ThesisListRelationFilter
    snsaccount?: StringNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    comment?: SortOrder
    affiliation?: SortOrder
    society?: SortOrder
    followBy?: FollowsOrderByRelationAggregateInput
    following?: FollowsOrderByRelationAggregateInput
    thesis?: ThesisOrderByRelationAggregateInput
    snsaccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    comment?: SortOrder
    affiliation?: SortOrder
    society?: SortOrder
    snsaccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    comment?: StringNullableWithAggregatesFilter | string | null
    affiliation?: StringNullableWithAggregatesFilter | string | null
    society?: StringNullableListFilter
    snsaccount?: StringNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ThesisWhereInput = {
    AND?: Enumerable<ThesisWhereInput>
    OR?: Enumerable<ThesisWhereInput>
    NOT?: Enumerable<ThesisWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    abstract?: StringFilter | string
    firstAuthor?: XOR<ProfileRelationFilter, ProfileWhereInput>
    firstAuthorId?: StringFilter | string
    otherAuthor?: StringNullableListFilter
    tags?: ThesisOnTagListRelationFilter
  }

  export type ThesisOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    firstAuthor?: ProfileOrderByWithRelationInput
    firstAuthorId?: SortOrder
    otherAuthor?: SortOrder
    tags?: ThesisOnTagOrderByRelationAggregateInput
  }

  export type ThesisWhereUniqueInput = {
    id?: number
  }

  export type ThesisOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    firstAuthorId?: SortOrder
    otherAuthor?: SortOrder
    _count?: ThesisCountOrderByAggregateInput
    _avg?: ThesisAvgOrderByAggregateInput
    _max?: ThesisMaxOrderByAggregateInput
    _min?: ThesisMinOrderByAggregateInput
    _sum?: ThesisSumOrderByAggregateInput
  }

  export type ThesisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThesisScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThesisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThesisScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    abstract?: StringWithAggregatesFilter | string
    firstAuthorId?: StringWithAggregatesFilter | string
    otherAuthor?: StringNullableListFilter
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: IntFilter | number
    tagName?: StringFilter | string
    thesis?: ThesisOnTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    tagName?: SortOrder
    thesis?: ThesisOnTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = {
    id?: number
  }

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    tagName?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tagName?: StringWithAggregatesFilter | string
  }

  export type ThesisOnTagWhereInput = {
    AND?: Enumerable<ThesisOnTagWhereInput>
    OR?: Enumerable<ThesisOnTagWhereInput>
    NOT?: Enumerable<ThesisOnTagWhereInput>
    thesis?: XOR<ThesisRelationFilter, ThesisWhereInput>
    thesisId?: IntFilter | number
    tags?: XOR<TagRelationFilter, TagWhereInput>
    tagId?: IntFilter | number
  }

  export type ThesisOnTagOrderByWithRelationInput = {
    thesis?: ThesisOrderByWithRelationInput
    thesisId?: SortOrder
    tags?: TagOrderByWithRelationInput
    tagId?: SortOrder
  }

  export type ThesisOnTagWhereUniqueInput = {
    thesisId_tagId?: ThesisOnTagThesisIdTagIdCompoundUniqueInput
  }

  export type ThesisOnTagOrderByWithAggregationInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
    _count?: ThesisOnTagCountOrderByAggregateInput
    _avg?: ThesisOnTagAvgOrderByAggregateInput
    _max?: ThesisOnTagMaxOrderByAggregateInput
    _min?: ThesisOnTagMinOrderByAggregateInput
    _sum?: ThesisOnTagSumOrderByAggregateInput
  }

  export type ThesisOnTagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThesisOnTagScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThesisOnTagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThesisOnTagScalarWhereWithAggregatesInput>
    thesisId?: IntWithAggregatesFilter | number
    tagId?: IntWithAggregatesFilter | number
  }

  export type FollowsWhereInput = {
    AND?: Enumerable<FollowsWhereInput>
    OR?: Enumerable<FollowsWhereInput>
    NOT?: Enumerable<FollowsWhereInput>
    follower?: XOR<ProfileRelationFilter, ProfileWhereInput>
    followerId?: StringFilter | string
    following?: XOR<ProfileRelationFilter, ProfileWhereInput>
    followingId?: StringFilter | string
  }

  export type FollowsOrderByWithRelationInput = {
    follower?: ProfileOrderByWithRelationInput
    followerId?: SortOrder
    following?: ProfileOrderByWithRelationInput
    followingId?: SortOrder
  }

  export type FollowsWhereUniqueInput = {
    followerId_followingId?: FollowsFollowerIdFollowingIdCompoundUniqueInput
  }

  export type FollowsOrderByWithAggregationInput = {
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: FollowsCountOrderByAggregateInput
    _max?: FollowsMaxOrderByAggregateInput
    _min?: FollowsMinOrderByAggregateInput
  }

  export type FollowsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FollowsScalarWhereWithAggregatesInput>
    OR?: Enumerable<FollowsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FollowsScalarWhereWithAggregatesInput>
    followerId?: StringWithAggregatesFilter | string
    followingId?: StringWithAggregatesFilter | string
  }

  export type PostCreateInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
    author?: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
    authorId?: string | null
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostCreateManyInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
    authorId?: string | null
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
    thesis?: ThesisCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
    thesis?: ThesisUncheckedCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
    thesis?: ThesisUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
    thesis?: ThesisUncheckedUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThesisCreateInput = {
    title: string
    abstract: string
    firstAuthor: ProfileCreateNestedOneWithoutThesisInput
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagCreateNestedManyWithoutThesisInput
  }

  export type ThesisUncheckedCreateInput = {
    id?: number
    title: string
    abstract: string
    firstAuthorId: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUncheckedCreateNestedManyWithoutThesisInput
  }

  export type ThesisUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    firstAuthor?: ProfileUpdateOneRequiredWithoutThesisNestedInput
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUpdateManyWithoutThesisNestedInput
  }

  export type ThesisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    firstAuthorId?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUncheckedUpdateManyWithoutThesisNestedInput
  }

  export type ThesisCreateManyInput = {
    id?: number
    title: string
    abstract: string
    firstAuthorId: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
  }

  export type ThesisUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
  }

  export type ThesisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    firstAuthorId?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
  }

  export type TagCreateInput = {
    tagName: string
    thesis?: ThesisOnTagCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    tagName: string
    thesis?: ThesisOnTagUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagUpdateInput = {
    tagName?: StringFieldUpdateOperationsInput | string
    thesis?: ThesisOnTagUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagName?: StringFieldUpdateOperationsInput | string
    thesis?: ThesisOnTagUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagCreateManyInput = {
    id?: number
    tagName: string
  }

  export type TagUpdateManyMutationInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type ThesisOnTagCreateInput = {
    thesis: ThesisCreateNestedOneWithoutTagsInput
    tags: TagCreateNestedOneWithoutThesisInput
  }

  export type ThesisOnTagUncheckedCreateInput = {
    thesisId: number
    tagId: number
  }

  export type ThesisOnTagUpdateInput = {
    thesis?: ThesisUpdateOneRequiredWithoutTagsNestedInput
    tags?: TagUpdateOneRequiredWithoutThesisNestedInput
  }

  export type ThesisOnTagUncheckedUpdateInput = {
    thesisId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ThesisOnTagCreateManyInput = {
    thesisId: number
    tagId: number
  }

  export type ThesisOnTagUpdateManyMutationInput = {

  }

  export type ThesisOnTagUncheckedUpdateManyInput = {
    thesisId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsCreateInput = {
    follower: ProfileCreateNestedOneWithoutFollowingInput
    following: ProfileCreateNestedOneWithoutFollowByInput
  }

  export type FollowsUncheckedCreateInput = {
    followerId: string
    followingId: string
  }

  export type FollowsUpdateInput = {
    follower?: ProfileUpdateOneRequiredWithoutFollowingNestedInput
    following?: ProfileUpdateOneRequiredWithoutFollowByNestedInput
  }

  export type FollowsUncheckedUpdateInput = {
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowsCreateManyInput = {
    followerId: string
    followingId: string
  }

  export type FollowsUpdateManyMutationInput = {

  }

  export type FollowsUncheckedUpdateManyInput = {
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type FollowsListRelationFilter = {
    every?: FollowsWhereInput
    some?: FollowsWhereInput
    none?: FollowsWhereInput
  }

  export type ThesisListRelationFilter = {
    every?: ThesisWhereInput
    some?: ThesisWhereInput
    none?: ThesisWhereInput
  }

  export type FollowsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThesisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    comment?: SortOrder
    affiliation?: SortOrder
    society?: SortOrder
    snsaccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    comment?: SortOrder
    affiliation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    comment?: SortOrder
    affiliation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type ThesisOnTagListRelationFilter = {
    every?: ThesisOnTagWhereInput
    some?: ThesisOnTagWhereInput
    none?: ThesisOnTagWhereInput
  }

  export type ThesisOnTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThesisCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    firstAuthorId?: SortOrder
    otherAuthor?: SortOrder
  }

  export type ThesisAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThesisMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    firstAuthorId?: SortOrder
  }

  export type ThesisMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    abstract?: SortOrder
    firstAuthorId?: SortOrder
  }

  export type ThesisSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThesisRelationFilter = {
    is?: ThesisWhereInput
    isNot?: ThesisWhereInput
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type ThesisOnTagThesisIdTagIdCompoundUniqueInput = {
    thesisId: number
    tagId: number
  }

  export type ThesisOnTagCountOrderByAggregateInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
  }

  export type ThesisOnTagAvgOrderByAggregateInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
  }

  export type ThesisOnTagMaxOrderByAggregateInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
  }

  export type ThesisOnTagMinOrderByAggregateInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
  }

  export type ThesisOnTagSumOrderByAggregateInput = {
    thesisId?: SortOrder
    tagId?: SortOrder
  }

  export type FollowsFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowsCountOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsMaxOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsMinOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ProfileCreatesocietyInput = {
    set: Enumerable<string>
  }

  export type FollowsCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowingInput>, Enumerable<FollowsUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowingInput>
    createMany?: FollowsCreateManyFollowingInputEnvelope
    connect?: Enumerable<FollowsWhereUniqueInput>
  }

  export type FollowsCreateNestedManyWithoutFollowerInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowerInput>, Enumerable<FollowsUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowerInput>
    createMany?: FollowsCreateManyFollowerInputEnvelope
    connect?: Enumerable<FollowsWhereUniqueInput>
  }

  export type ThesisCreateNestedManyWithoutFirstAuthorInput = {
    create?: XOR<Enumerable<ThesisCreateWithoutFirstAuthorInput>, Enumerable<ThesisUncheckedCreateWithoutFirstAuthorInput>>
    connectOrCreate?: Enumerable<ThesisCreateOrConnectWithoutFirstAuthorInput>
    createMany?: ThesisCreateManyFirstAuthorInputEnvelope
    connect?: Enumerable<ThesisWhereUniqueInput>
  }

  export type ProfileCreatesnsaccountInput = {
    set: Enumerable<string>
  }

  export type FollowsUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowingInput>, Enumerable<FollowsUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowingInput>
    createMany?: FollowsCreateManyFollowingInputEnvelope
    connect?: Enumerable<FollowsWhereUniqueInput>
  }

  export type FollowsUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowerInput>, Enumerable<FollowsUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowerInput>
    createMany?: FollowsCreateManyFollowerInputEnvelope
    connect?: Enumerable<FollowsWhereUniqueInput>
  }

  export type ThesisUncheckedCreateNestedManyWithoutFirstAuthorInput = {
    create?: XOR<Enumerable<ThesisCreateWithoutFirstAuthorInput>, Enumerable<ThesisUncheckedCreateWithoutFirstAuthorInput>>
    connectOrCreate?: Enumerable<ThesisCreateOrConnectWithoutFirstAuthorInput>
    createMany?: ThesisCreateManyFirstAuthorInputEnvelope
    connect?: Enumerable<ThesisWhereUniqueInput>
  }

  export type ProfileUpdatesocietyInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FollowsUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowingInput>, Enumerable<FollowsUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<FollowsUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: FollowsCreateManyFollowingInputEnvelope
    set?: Enumerable<FollowsWhereUniqueInput>
    disconnect?: Enumerable<FollowsWhereUniqueInput>
    delete?: Enumerable<FollowsWhereUniqueInput>
    connect?: Enumerable<FollowsWhereUniqueInput>
    update?: Enumerable<FollowsUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<FollowsUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<FollowsScalarWhereInput>
  }

  export type FollowsUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowerInput>, Enumerable<FollowsUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowerInput>
    upsert?: Enumerable<FollowsUpsertWithWhereUniqueWithoutFollowerInput>
    createMany?: FollowsCreateManyFollowerInputEnvelope
    set?: Enumerable<FollowsWhereUniqueInput>
    disconnect?: Enumerable<FollowsWhereUniqueInput>
    delete?: Enumerable<FollowsWhereUniqueInput>
    connect?: Enumerable<FollowsWhereUniqueInput>
    update?: Enumerable<FollowsUpdateWithWhereUniqueWithoutFollowerInput>
    updateMany?: Enumerable<FollowsUpdateManyWithWhereWithoutFollowerInput>
    deleteMany?: Enumerable<FollowsScalarWhereInput>
  }

  export type ThesisUpdateManyWithoutFirstAuthorNestedInput = {
    create?: XOR<Enumerable<ThesisCreateWithoutFirstAuthorInput>, Enumerable<ThesisUncheckedCreateWithoutFirstAuthorInput>>
    connectOrCreate?: Enumerable<ThesisCreateOrConnectWithoutFirstAuthorInput>
    upsert?: Enumerable<ThesisUpsertWithWhereUniqueWithoutFirstAuthorInput>
    createMany?: ThesisCreateManyFirstAuthorInputEnvelope
    set?: Enumerable<ThesisWhereUniqueInput>
    disconnect?: Enumerable<ThesisWhereUniqueInput>
    delete?: Enumerable<ThesisWhereUniqueInput>
    connect?: Enumerable<ThesisWhereUniqueInput>
    update?: Enumerable<ThesisUpdateWithWhereUniqueWithoutFirstAuthorInput>
    updateMany?: Enumerable<ThesisUpdateManyWithWhereWithoutFirstAuthorInput>
    deleteMany?: Enumerable<ThesisScalarWhereInput>
  }

  export type ProfileUpdatesnsaccountInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FollowsUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowingInput>, Enumerable<FollowsUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<FollowsUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: FollowsCreateManyFollowingInputEnvelope
    set?: Enumerable<FollowsWhereUniqueInput>
    disconnect?: Enumerable<FollowsWhereUniqueInput>
    delete?: Enumerable<FollowsWhereUniqueInput>
    connect?: Enumerable<FollowsWhereUniqueInput>
    update?: Enumerable<FollowsUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<FollowsUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<FollowsScalarWhereInput>
  }

  export type FollowsUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<Enumerable<FollowsCreateWithoutFollowerInput>, Enumerable<FollowsUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowsCreateOrConnectWithoutFollowerInput>
    upsert?: Enumerable<FollowsUpsertWithWhereUniqueWithoutFollowerInput>
    createMany?: FollowsCreateManyFollowerInputEnvelope
    set?: Enumerable<FollowsWhereUniqueInput>
    disconnect?: Enumerable<FollowsWhereUniqueInput>
    delete?: Enumerable<FollowsWhereUniqueInput>
    connect?: Enumerable<FollowsWhereUniqueInput>
    update?: Enumerable<FollowsUpdateWithWhereUniqueWithoutFollowerInput>
    updateMany?: Enumerable<FollowsUpdateManyWithWhereWithoutFollowerInput>
    deleteMany?: Enumerable<FollowsScalarWhereInput>
  }

  export type ThesisUncheckedUpdateManyWithoutFirstAuthorNestedInput = {
    create?: XOR<Enumerable<ThesisCreateWithoutFirstAuthorInput>, Enumerable<ThesisUncheckedCreateWithoutFirstAuthorInput>>
    connectOrCreate?: Enumerable<ThesisCreateOrConnectWithoutFirstAuthorInput>
    upsert?: Enumerable<ThesisUpsertWithWhereUniqueWithoutFirstAuthorInput>
    createMany?: ThesisCreateManyFirstAuthorInputEnvelope
    set?: Enumerable<ThesisWhereUniqueInput>
    disconnect?: Enumerable<ThesisWhereUniqueInput>
    delete?: Enumerable<ThesisWhereUniqueInput>
    connect?: Enumerable<ThesisWhereUniqueInput>
    update?: Enumerable<ThesisUpdateWithWhereUniqueWithoutFirstAuthorInput>
    updateMany?: Enumerable<ThesisUpdateManyWithWhereWithoutFirstAuthorInput>
    deleteMany?: Enumerable<ThesisScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutThesisInput = {
    create?: XOR<ProfileCreateWithoutThesisInput, ProfileUncheckedCreateWithoutThesisInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutThesisInput
    connect?: ProfileWhereUniqueInput
  }

  export type ThesisCreateotherAuthorInput = {
    set: Enumerable<string>
  }

  export type ThesisOnTagCreateNestedManyWithoutThesisInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutThesisInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutThesisInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutThesisInput>
    createMany?: ThesisOnTagCreateManyThesisInputEnvelope
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
  }

  export type ThesisOnTagUncheckedCreateNestedManyWithoutThesisInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutThesisInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutThesisInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutThesisInput>
    createMany?: ThesisOnTagCreateManyThesisInputEnvelope
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutThesisNestedInput = {
    create?: XOR<ProfileCreateWithoutThesisInput, ProfileUncheckedCreateWithoutThesisInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutThesisInput
    upsert?: ProfileUpsertWithoutThesisInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutThesisInput, ProfileUncheckedUpdateWithoutThesisInput>
  }

  export type ThesisUpdateotherAuthorInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ThesisOnTagUpdateManyWithoutThesisNestedInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutThesisInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutThesisInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutThesisInput>
    upsert?: Enumerable<ThesisOnTagUpsertWithWhereUniqueWithoutThesisInput>
    createMany?: ThesisOnTagCreateManyThesisInputEnvelope
    set?: Enumerable<ThesisOnTagWhereUniqueInput>
    disconnect?: Enumerable<ThesisOnTagWhereUniqueInput>
    delete?: Enumerable<ThesisOnTagWhereUniqueInput>
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
    update?: Enumerable<ThesisOnTagUpdateWithWhereUniqueWithoutThesisInput>
    updateMany?: Enumerable<ThesisOnTagUpdateManyWithWhereWithoutThesisInput>
    deleteMany?: Enumerable<ThesisOnTagScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ThesisOnTagUncheckedUpdateManyWithoutThesisNestedInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutThesisInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutThesisInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutThesisInput>
    upsert?: Enumerable<ThesisOnTagUpsertWithWhereUniqueWithoutThesisInput>
    createMany?: ThesisOnTagCreateManyThesisInputEnvelope
    set?: Enumerable<ThesisOnTagWhereUniqueInput>
    disconnect?: Enumerable<ThesisOnTagWhereUniqueInput>
    delete?: Enumerable<ThesisOnTagWhereUniqueInput>
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
    update?: Enumerable<ThesisOnTagUpdateWithWhereUniqueWithoutThesisInput>
    updateMany?: Enumerable<ThesisOnTagUpdateManyWithWhereWithoutThesisInput>
    deleteMany?: Enumerable<ThesisOnTagScalarWhereInput>
  }

  export type ThesisOnTagCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutTagsInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutTagsInput>
    createMany?: ThesisOnTagCreateManyTagsInputEnvelope
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
  }

  export type ThesisOnTagUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutTagsInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutTagsInput>
    createMany?: ThesisOnTagCreateManyTagsInputEnvelope
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
  }

  export type ThesisOnTagUpdateManyWithoutTagsNestedInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutTagsInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<ThesisOnTagUpsertWithWhereUniqueWithoutTagsInput>
    createMany?: ThesisOnTagCreateManyTagsInputEnvelope
    set?: Enumerable<ThesisOnTagWhereUniqueInput>
    disconnect?: Enumerable<ThesisOnTagWhereUniqueInput>
    delete?: Enumerable<ThesisOnTagWhereUniqueInput>
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
    update?: Enumerable<ThesisOnTagUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<ThesisOnTagUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<ThesisOnTagScalarWhereInput>
  }

  export type ThesisOnTagUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<Enumerable<ThesisOnTagCreateWithoutTagsInput>, Enumerable<ThesisOnTagUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<ThesisOnTagCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<ThesisOnTagUpsertWithWhereUniqueWithoutTagsInput>
    createMany?: ThesisOnTagCreateManyTagsInputEnvelope
    set?: Enumerable<ThesisOnTagWhereUniqueInput>
    disconnect?: Enumerable<ThesisOnTagWhereUniqueInput>
    delete?: Enumerable<ThesisOnTagWhereUniqueInput>
    connect?: Enumerable<ThesisOnTagWhereUniqueInput>
    update?: Enumerable<ThesisOnTagUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<ThesisOnTagUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<ThesisOnTagScalarWhereInput>
  }

  export type ThesisCreateNestedOneWithoutTagsInput = {
    create?: XOR<ThesisCreateWithoutTagsInput, ThesisUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ThesisCreateOrConnectWithoutTagsInput
    connect?: ThesisWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutThesisInput = {
    create?: XOR<TagCreateWithoutThesisInput, TagUncheckedCreateWithoutThesisInput>
    connectOrCreate?: TagCreateOrConnectWithoutThesisInput
    connect?: TagWhereUniqueInput
  }

  export type ThesisUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ThesisCreateWithoutTagsInput, ThesisUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ThesisCreateOrConnectWithoutTagsInput
    upsert?: ThesisUpsertWithoutTagsInput
    connect?: ThesisWhereUniqueInput
    update?: XOR<ThesisUpdateWithoutTagsInput, ThesisUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutThesisNestedInput = {
    create?: XOR<TagCreateWithoutThesisInput, TagUncheckedCreateWithoutThesisInput>
    connectOrCreate?: TagCreateOrConnectWithoutThesisInput
    upsert?: TagUpsertWithoutThesisInput
    connect?: TagWhereUniqueInput
    update?: XOR<TagUpdateWithoutThesisInput, TagUncheckedUpdateWithoutThesisInput>
  }

  export type ProfileCreateNestedOneWithoutFollowingInput = {
    create?: XOR<ProfileCreateWithoutFollowingInput, ProfileUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFollowingInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutFollowByInput = {
    create?: XOR<ProfileCreateWithoutFollowByInput, ProfileUncheckedCreateWithoutFollowByInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFollowByInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<ProfileCreateWithoutFollowingInput, ProfileUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFollowingInput
    upsert?: ProfileUpsertWithoutFollowingInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutFollowingInput, ProfileUncheckedUpdateWithoutFollowingInput>
  }

  export type ProfileUpdateOneRequiredWithoutFollowByNestedInput = {
    create?: XOR<ProfileCreateWithoutFollowByInput, ProfileUncheckedCreateWithoutFollowByInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFollowByInput
    upsert?: ProfileUpsertWithoutFollowByInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutFollowByInput, ProfileUncheckedUpdateWithoutFollowByInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateWithoutAuthorInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: Enumerable<PostCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    authorId?: StringNullableFilter | string | null
  }

  export type FollowsCreateWithoutFollowingInput = {
    follower: ProfileCreateNestedOneWithoutFollowingInput
  }

  export type FollowsUncheckedCreateWithoutFollowingInput = {
    followerId: string
  }

  export type FollowsCreateOrConnectWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    create: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput>
  }

  export type FollowsCreateManyFollowingInputEnvelope = {
    data: Enumerable<FollowsCreateManyFollowingInput>
    skipDuplicates?: boolean
  }

  export type FollowsCreateWithoutFollowerInput = {
    following: ProfileCreateNestedOneWithoutFollowByInput
  }

  export type FollowsUncheckedCreateWithoutFollowerInput = {
    followingId: string
  }

  export type FollowsCreateOrConnectWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    create: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput>
  }

  export type FollowsCreateManyFollowerInputEnvelope = {
    data: Enumerable<FollowsCreateManyFollowerInput>
    skipDuplicates?: boolean
  }

  export type ThesisCreateWithoutFirstAuthorInput = {
    title: string
    abstract: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagCreateNestedManyWithoutThesisInput
  }

  export type ThesisUncheckedCreateWithoutFirstAuthorInput = {
    id?: number
    title: string
    abstract: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUncheckedCreateNestedManyWithoutThesisInput
  }

  export type ThesisCreateOrConnectWithoutFirstAuthorInput = {
    where: ThesisWhereUniqueInput
    create: XOR<ThesisCreateWithoutFirstAuthorInput, ThesisUncheckedCreateWithoutFirstAuthorInput>
  }

  export type ThesisCreateManyFirstAuthorInputEnvelope = {
    data: Enumerable<ThesisCreateManyFirstAuthorInput>
    skipDuplicates?: boolean
  }

  export type FollowsUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    update: XOR<FollowsUpdateWithoutFollowingInput, FollowsUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput>
  }

  export type FollowsUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    data: XOR<FollowsUpdateWithoutFollowingInput, FollowsUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowsUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowsScalarWhereInput
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyWithoutFollowByInput>
  }

  export type FollowsScalarWhereInput = {
    AND?: Enumerable<FollowsScalarWhereInput>
    OR?: Enumerable<FollowsScalarWhereInput>
    NOT?: Enumerable<FollowsScalarWhereInput>
    followerId?: StringFilter | string
    followingId?: StringFilter | string
  }

  export type FollowsUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    update: XOR<FollowsUpdateWithoutFollowerInput, FollowsUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput>
  }

  export type FollowsUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    data: XOR<FollowsUpdateWithoutFollowerInput, FollowsUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowsUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowsScalarWhereInput
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyWithoutFollowingInput>
  }

  export type ThesisUpsertWithWhereUniqueWithoutFirstAuthorInput = {
    where: ThesisWhereUniqueInput
    update: XOR<ThesisUpdateWithoutFirstAuthorInput, ThesisUncheckedUpdateWithoutFirstAuthorInput>
    create: XOR<ThesisCreateWithoutFirstAuthorInput, ThesisUncheckedCreateWithoutFirstAuthorInput>
  }

  export type ThesisUpdateWithWhereUniqueWithoutFirstAuthorInput = {
    where: ThesisWhereUniqueInput
    data: XOR<ThesisUpdateWithoutFirstAuthorInput, ThesisUncheckedUpdateWithoutFirstAuthorInput>
  }

  export type ThesisUpdateManyWithWhereWithoutFirstAuthorInput = {
    where: ThesisScalarWhereInput
    data: XOR<ThesisUpdateManyMutationInput, ThesisUncheckedUpdateManyWithoutThesisInput>
  }

  export type ThesisScalarWhereInput = {
    AND?: Enumerable<ThesisScalarWhereInput>
    OR?: Enumerable<ThesisScalarWhereInput>
    NOT?: Enumerable<ThesisScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    abstract?: StringFilter | string
    firstAuthorId?: StringFilter | string
    otherAuthor?: StringNullableListFilter
  }

  export type ProfileCreateWithoutThesisInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutThesisInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutThesisInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutThesisInput, ProfileUncheckedCreateWithoutThesisInput>
  }

  export type ThesisOnTagCreateWithoutThesisInput = {
    tags: TagCreateNestedOneWithoutThesisInput
  }

  export type ThesisOnTagUncheckedCreateWithoutThesisInput = {
    tagId: number
  }

  export type ThesisOnTagCreateOrConnectWithoutThesisInput = {
    where: ThesisOnTagWhereUniqueInput
    create: XOR<ThesisOnTagCreateWithoutThesisInput, ThesisOnTagUncheckedCreateWithoutThesisInput>
  }

  export type ThesisOnTagCreateManyThesisInputEnvelope = {
    data: Enumerable<ThesisOnTagCreateManyThesisInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutThesisInput = {
    update: XOR<ProfileUpdateWithoutThesisInput, ProfileUncheckedUpdateWithoutThesisInput>
    create: XOR<ProfileCreateWithoutThesisInput, ProfileUncheckedCreateWithoutThesisInput>
  }

  export type ProfileUpdateWithoutThesisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutThesisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThesisOnTagUpsertWithWhereUniqueWithoutThesisInput = {
    where: ThesisOnTagWhereUniqueInput
    update: XOR<ThesisOnTagUpdateWithoutThesisInput, ThesisOnTagUncheckedUpdateWithoutThesisInput>
    create: XOR<ThesisOnTagCreateWithoutThesisInput, ThesisOnTagUncheckedCreateWithoutThesisInput>
  }

  export type ThesisOnTagUpdateWithWhereUniqueWithoutThesisInput = {
    where: ThesisOnTagWhereUniqueInput
    data: XOR<ThesisOnTagUpdateWithoutThesisInput, ThesisOnTagUncheckedUpdateWithoutThesisInput>
  }

  export type ThesisOnTagUpdateManyWithWhereWithoutThesisInput = {
    where: ThesisOnTagScalarWhereInput
    data: XOR<ThesisOnTagUpdateManyMutationInput, ThesisOnTagUncheckedUpdateManyWithoutTagsInput>
  }

  export type ThesisOnTagScalarWhereInput = {
    AND?: Enumerable<ThesisOnTagScalarWhereInput>
    OR?: Enumerable<ThesisOnTagScalarWhereInput>
    NOT?: Enumerable<ThesisOnTagScalarWhereInput>
    thesisId?: IntFilter | number
    tagId?: IntFilter | number
  }

  export type ThesisOnTagCreateWithoutTagsInput = {
    thesis: ThesisCreateNestedOneWithoutTagsInput
  }

  export type ThesisOnTagUncheckedCreateWithoutTagsInput = {
    thesisId: number
  }

  export type ThesisOnTagCreateOrConnectWithoutTagsInput = {
    where: ThesisOnTagWhereUniqueInput
    create: XOR<ThesisOnTagCreateWithoutTagsInput, ThesisOnTagUncheckedCreateWithoutTagsInput>
  }

  export type ThesisOnTagCreateManyTagsInputEnvelope = {
    data: Enumerable<ThesisOnTagCreateManyTagsInput>
    skipDuplicates?: boolean
  }

  export type ThesisOnTagUpsertWithWhereUniqueWithoutTagsInput = {
    where: ThesisOnTagWhereUniqueInput
    update: XOR<ThesisOnTagUpdateWithoutTagsInput, ThesisOnTagUncheckedUpdateWithoutTagsInput>
    create: XOR<ThesisOnTagCreateWithoutTagsInput, ThesisOnTagUncheckedCreateWithoutTagsInput>
  }

  export type ThesisOnTagUpdateWithWhereUniqueWithoutTagsInput = {
    where: ThesisOnTagWhereUniqueInput
    data: XOR<ThesisOnTagUpdateWithoutTagsInput, ThesisOnTagUncheckedUpdateWithoutTagsInput>
  }

  export type ThesisOnTagUpdateManyWithWhereWithoutTagsInput = {
    where: ThesisOnTagScalarWhereInput
    data: XOR<ThesisOnTagUpdateManyMutationInput, ThesisOnTagUncheckedUpdateManyWithoutThesisInput>
  }

  export type ThesisCreateWithoutTagsInput = {
    title: string
    abstract: string
    firstAuthor: ProfileCreateNestedOneWithoutThesisInput
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
  }

  export type ThesisUncheckedCreateWithoutTagsInput = {
    id?: number
    title: string
    abstract: string
    firstAuthorId: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
  }

  export type ThesisCreateOrConnectWithoutTagsInput = {
    where: ThesisWhereUniqueInput
    create: XOR<ThesisCreateWithoutTagsInput, ThesisUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutThesisInput = {
    tagName: string
  }

  export type TagUncheckedCreateWithoutThesisInput = {
    id?: number
    tagName: string
  }

  export type TagCreateOrConnectWithoutThesisInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutThesisInput, TagUncheckedCreateWithoutThesisInput>
  }

  export type ThesisUpsertWithoutTagsInput = {
    update: XOR<ThesisUpdateWithoutTagsInput, ThesisUncheckedUpdateWithoutTagsInput>
    create: XOR<ThesisCreateWithoutTagsInput, ThesisUncheckedCreateWithoutTagsInput>
  }

  export type ThesisUpdateWithoutTagsInput = {
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    firstAuthor?: ProfileUpdateOneRequiredWithoutThesisNestedInput
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
  }

  export type ThesisUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    firstAuthorId?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
  }

  export type TagUpsertWithoutThesisInput = {
    update: XOR<TagUpdateWithoutThesisInput, TagUncheckedUpdateWithoutThesisInput>
    create: XOR<TagCreateWithoutThesisInput, TagUncheckedCreateWithoutThesisInput>
  }

  export type TagUpdateWithoutThesisInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutThesisInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateWithoutFollowingInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsCreateNestedManyWithoutFollowingInput
    thesis?: ThesisCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutFollowingInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    thesis?: ThesisUncheckedCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutFollowingInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutFollowingInput, ProfileUncheckedCreateWithoutFollowingInput>
  }

  export type ProfileCreateWithoutFollowByInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    following?: FollowsCreateNestedManyWithoutFollowerInput
    thesis?: ThesisCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutFollowByInput = {
    id?: string
    name?: string | null
    email?: string | null
    comment?: string | null
    affiliation?: string | null
    society?: ProfileCreatesocietyInput | Enumerable<string>
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
    thesis?: ThesisUncheckedCreateNestedManyWithoutFirstAuthorInput
    snsaccount?: ProfileCreatesnsaccountInput | Enumerable<string>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutFollowByInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutFollowByInput, ProfileUncheckedCreateWithoutFollowByInput>
  }

  export type ProfileUpsertWithoutFollowingInput = {
    update: XOR<ProfileUpdateWithoutFollowingInput, ProfileUncheckedUpdateWithoutFollowingInput>
    create: XOR<ProfileCreateWithoutFollowingInput, ProfileUncheckedCreateWithoutFollowingInput>
  }

  export type ProfileUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUpdateManyWithoutFollowingNestedInput
    thesis?: ThesisUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    followBy?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    thesis?: ThesisUncheckedUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUpsertWithoutFollowByInput = {
    update: XOR<ProfileUpdateWithoutFollowByInput, ProfileUncheckedUpdateWithoutFollowByInput>
    create: XOR<ProfileCreateWithoutFollowByInput, ProfileUncheckedCreateWithoutFollowByInput>
  }

  export type ProfileUpdateWithoutFollowByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    following?: FollowsUpdateManyWithoutFollowerNestedInput
    thesis?: ThesisUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutFollowByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    society?: ProfileUpdatesocietyInput | Enumerable<string>
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
    thesis?: ThesisUncheckedUpdateManyWithoutFirstAuthorNestedInput
    snsaccount?: ProfileUpdatesnsaccountInput | Enumerable<string>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyAuthorInput = {
    id?: string
    title: string
    content?: string | null
    published?: boolean
  }

  export type PostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FollowsCreateManyFollowingInput = {
    followerId: string
  }

  export type FollowsCreateManyFollowerInput = {
    followingId: string
  }

  export type ThesisCreateManyFirstAuthorInput = {
    id?: number
    title: string
    abstract: string
    otherAuthor?: ThesisCreateotherAuthorInput | Enumerable<string>
  }

  export type FollowsUpdateWithoutFollowingInput = {
    follower?: ProfileUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowsUncheckedUpdateWithoutFollowingInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowsUncheckedUpdateManyWithoutFollowByInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowsUpdateWithoutFollowerInput = {
    following?: ProfileUpdateOneRequiredWithoutFollowByNestedInput
  }

  export type FollowsUncheckedUpdateWithoutFollowerInput = {
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowsUncheckedUpdateManyWithoutFollowingInput = {
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type ThesisUpdateWithoutFirstAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUpdateManyWithoutThesisNestedInput
  }

  export type ThesisUncheckedUpdateWithoutFirstAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
    tags?: ThesisOnTagUncheckedUpdateManyWithoutThesisNestedInput
  }

  export type ThesisUncheckedUpdateManyWithoutThesisInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    abstract?: StringFieldUpdateOperationsInput | string
    otherAuthor?: ThesisUpdateotherAuthorInput | Enumerable<string>
  }

  export type ThesisOnTagCreateManyThesisInput = {
    tagId: number
  }

  export type ThesisOnTagUpdateWithoutThesisInput = {
    tags?: TagUpdateOneRequiredWithoutThesisNestedInput
  }

  export type ThesisOnTagUncheckedUpdateWithoutThesisInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ThesisOnTagUncheckedUpdateManyWithoutTagsInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ThesisOnTagCreateManyTagsInput = {
    thesisId: number
  }

  export type ThesisOnTagUpdateWithoutTagsInput = {
    thesis?: ThesisUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ThesisOnTagUncheckedUpdateWithoutTagsInput = {
    thesisId?: IntFieldUpdateOperationsInput | number
  }

  export type ThesisOnTagUncheckedUpdateManyWithoutThesisInput = {
    thesisId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}